{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMlz2Kk1QhVp6X/goIJHObk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/toufiqmusah/IndabaX25/blob/main/Neural%20Architecture%20Search%20%26%20Deployment%20Optimization%20-%20Part%204\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "---\n",
        "# **Efficient Deep Learning: Neural Architecture Search & Optimized Model Deployment** - Part 4\n",
        "\n",
        "#### Program: `Deep Learning Indabax, Ghana, 2025` .\n",
        "#### 🏫 Institution: Kumasu Centre for Collaborative Research in Tropical Medicine (KCCR)\n",
        "#### 📅 Date: `*16 th June, 2025`\n",
        "\n",
        "---\n",
        "\n",
        "##### 👨‍🏫 Facilitator: Toufiq Musah       \n",
        "\n",
        "**Lecturer and Researcher in Machine Learning**  \n",
        "\n",
        "✉️ Email: [toufiq Musah](toufiqmusah32@gmail.com)  \n",
        "🔗 LinkedIn: [toufiq](https://www.linkedin.com/in/toufiqmusah/)\n",
        "\n",
        "---\n",
        "### 🛠️ Tools and  Frameworks used  \n",
        "\n",
        "- Python 3.x .\n",
        "- TensorFlow 2.x / Keras\n",
        "- Keras-Tuner for Parameterization\n",
        "- Matplotlib / Seaborn for Visualization\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "QgVlg2fC37Ps"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Table of Contents**\n",
        "\n",
        "1.   [Introduction](#Introduction)\n",
        "2.   [Prerequisites](#Prerequisites)\n",
        "3.   [Step-by-Step-Guide](#Step-by-Step-Guide)\n",
        "4.   [Code Examples](#Code-Examples)\n",
        "5.   [Troubleshooting](#Troubleshooting)\n",
        "6.   [Conclusion](#Conclusion)\n",
        "7.   [References](#References)"
      ],
      "metadata": {
        "id": "3exRhpCXiZ0M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. **Neural Architecture Search**\n"
      ],
      "metadata": {
        "id": "fB5axAYMdiK5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " *Why automate the design of the network itself?*\n",
        "\n",
        "**Definition.** Neural Architecture Search (NAS) is an automated procedure that explores a *search space* of possible layer topologies and operations, trains many candidate networks, and selects the one that best optimises a user-defined objective (accuracy, latency, memory, …).\n",
        "\n",
        "**How it differs from hyper-parameter optimisation.**  \n",
        "NAS, in contrast to hyperparameterisation, can change the entire structure of a network (example; how many stages, which kernel size per block), instead of finetuning a given architecture.\n",
        "\n",
        "---\n",
        "\n",
        "#### **Example 1 – MnasNet: Reinforcement-Learning NAS**\n",
        "Google’s **MnasNet** used a policy-gradient RL agent to sample entire mobile CNNs, training 8000 candidates and rewarding those with high ImageNet accuracy *and* low real-device latency.\n",
        "\n",
        "#### **Example 2 – EfficientNet: NAS Baseline + Compound Scaling**\n",
        "EfficientNet begins with **EfficientNet-B0**, *exactly* the architecture produced by MnasNet’s RL search. The authors then introduced a *compound scaling* rule to simultaneously widen, deepen, and increase input resolution, generating B1–B7 models that set new ImageNet efficiency records.\n",
        "\n",
        "---\n",
        "> **Take-away:** NAS automates decisions at the structural level—creating novel cells and macro layouts—whereas classical hyper-parameter search rather fine-tunes numeric settings inside a hand-crafted design.\n"
      ],
      "metadata": {
        "id": "4-XQlZWx4tLe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip -q install keras-tuner"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fft2O4xwe5Ec",
        "outputId": "2592e9a9-dc3a-4409-97fe-cfc6694cd8cd"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/129.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━\u001b[0m \u001b[32m122.9/129.1 kB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.1/129.1 kB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import tensorflow as tf\n",
        "import keras_tuner as kt\n",
        "from tensorflow.keras.datasets import cifar10\n",
        "from tensorflow.keras.optimizers import SGD, Adam\n",
        "from tensorflow.keras.metrics import SparseCategoricalAccuracy\n",
        "from tensorflow.keras import layers, models, optimizers, callbacks, regularizers\n",
        "\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "Cc9tW2zYdpaZ"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# The Cancer Genome Atlas, Breast Cancer Dataset\n",
        "\n",
        "!gdown -q '1odEM4UcDSnc_Yo8I6YeIa128d271k9q-'"
      ],
      "metadata": {
        "id": "nP_C_fLRnBna"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### The Cancer Genomics Archive - Breast Cancer Omics Dataset\n",
        "This is a **high dimensional** type of dataset, often requiring rigourous optimization techniques for the best of results."
      ],
      "metadata": {
        "id": "gBJmlF230tfq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('TCGA-BRCA-dataset.csv')\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "CEH-2AKDnTMo",
        "outputId": "a0799daa-a650-46ad-cc05-7438e0ce5187"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rs_CLEC3A    rs_CPB1  rs_SCGB2A2  rs_SCGB1D2    rs_TFF1   rs_MUCL1  \\\n",
              "0   0.892818   6.580103   14.123672   10.606501  13.189237   6.649466   \n",
              "1   0.000000   3.691311   17.116090   15.517231   9.867616   9.691667   \n",
              "2   3.748150   4.375255    9.658123    5.326983  12.109539  11.644307   \n",
              "3   0.000000  18.235519   18.535480   14.533584  14.078992   8.913760   \n",
              "4   0.000000   4.583724   15.711865   12.804521   8.881669   8.430028   \n",
              "\n",
              "    rs_GSTM1     rs_PIP  rs_ADIPOQ   rs_ADH1B  ...  pp_p27.pT198  pp_p38.MAPK  \\\n",
              "0  10.520335  10.338490  10.248379  10.229970  ...     -0.043330    -0.002598   \n",
              "1   8.179522   7.911723   1.289598   1.818891  ...     -0.220764     0.220809   \n",
              "2  10.517330   5.114925  11.975349  11.911437  ...      0.010615    -0.133214   \n",
              "3  10.557465  13.304434   8.205059   9.211476  ...      0.064070    -0.384008   \n",
              "4  12.964607   6.806517   4.294341   5.385714  ...     -0.065488     0.209858   \n",
              "\n",
              "   pp_p38.pT180.Y182    pp_p53  pp_p62.LCK.ligand  pp_p70S6K  pp_p70S6K.pT389  \\\n",
              "0           0.449228 -0.375230          -0.691766  -0.337863        -0.178503   \n",
              "1           1.035115 -0.074136           0.279067   0.292925        -0.155242   \n",
              "2           0.344969 -0.351936           0.219910   0.308110        -0.190794   \n",
              "3           0.678042  0.096329          -0.266554  -0.079871        -0.463237   \n",
              "4           0.920408  0.042210          -0.441542  -0.152317         0.511386   \n",
              "\n",
              "   pp_p90RSK  pp_p90RSK.pT359.S363  vital.status  \n",
              "0   0.011638             -0.207257             0  \n",
              "1  -0.089365              0.267530             0  \n",
              "2  -0.222150             -0.198518             0  \n",
              "3   0.522998             -0.046902             0  \n",
              "4  -0.096482              0.037473             0  \n",
              "\n",
              "[5 rows x 1937 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-910b37ae-e1e0-4c42-ad56-e0ef9ccb86b5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rs_CLEC3A</th>\n",
              "      <th>rs_CPB1</th>\n",
              "      <th>rs_SCGB2A2</th>\n",
              "      <th>rs_SCGB1D2</th>\n",
              "      <th>rs_TFF1</th>\n",
              "      <th>rs_MUCL1</th>\n",
              "      <th>rs_GSTM1</th>\n",
              "      <th>rs_PIP</th>\n",
              "      <th>rs_ADIPOQ</th>\n",
              "      <th>rs_ADH1B</th>\n",
              "      <th>...</th>\n",
              "      <th>pp_p27.pT198</th>\n",
              "      <th>pp_p38.MAPK</th>\n",
              "      <th>pp_p38.pT180.Y182</th>\n",
              "      <th>pp_p53</th>\n",
              "      <th>pp_p62.LCK.ligand</th>\n",
              "      <th>pp_p70S6K</th>\n",
              "      <th>pp_p70S6K.pT389</th>\n",
              "      <th>pp_p90RSK</th>\n",
              "      <th>pp_p90RSK.pT359.S363</th>\n",
              "      <th>vital.status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.892818</td>\n",
              "      <td>6.580103</td>\n",
              "      <td>14.123672</td>\n",
              "      <td>10.606501</td>\n",
              "      <td>13.189237</td>\n",
              "      <td>6.649466</td>\n",
              "      <td>10.520335</td>\n",
              "      <td>10.338490</td>\n",
              "      <td>10.248379</td>\n",
              "      <td>10.229970</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.043330</td>\n",
              "      <td>-0.002598</td>\n",
              "      <td>0.449228</td>\n",
              "      <td>-0.375230</td>\n",
              "      <td>-0.691766</td>\n",
              "      <td>-0.337863</td>\n",
              "      <td>-0.178503</td>\n",
              "      <td>0.011638</td>\n",
              "      <td>-0.207257</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.691311</td>\n",
              "      <td>17.116090</td>\n",
              "      <td>15.517231</td>\n",
              "      <td>9.867616</td>\n",
              "      <td>9.691667</td>\n",
              "      <td>8.179522</td>\n",
              "      <td>7.911723</td>\n",
              "      <td>1.289598</td>\n",
              "      <td>1.818891</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.220764</td>\n",
              "      <td>0.220809</td>\n",
              "      <td>1.035115</td>\n",
              "      <td>-0.074136</td>\n",
              "      <td>0.279067</td>\n",
              "      <td>0.292925</td>\n",
              "      <td>-0.155242</td>\n",
              "      <td>-0.089365</td>\n",
              "      <td>0.267530</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.748150</td>\n",
              "      <td>4.375255</td>\n",
              "      <td>9.658123</td>\n",
              "      <td>5.326983</td>\n",
              "      <td>12.109539</td>\n",
              "      <td>11.644307</td>\n",
              "      <td>10.517330</td>\n",
              "      <td>5.114925</td>\n",
              "      <td>11.975349</td>\n",
              "      <td>11.911437</td>\n",
              "      <td>...</td>\n",
              "      <td>0.010615</td>\n",
              "      <td>-0.133214</td>\n",
              "      <td>0.344969</td>\n",
              "      <td>-0.351936</td>\n",
              "      <td>0.219910</td>\n",
              "      <td>0.308110</td>\n",
              "      <td>-0.190794</td>\n",
              "      <td>-0.222150</td>\n",
              "      <td>-0.198518</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.235519</td>\n",
              "      <td>18.535480</td>\n",
              "      <td>14.533584</td>\n",
              "      <td>14.078992</td>\n",
              "      <td>8.913760</td>\n",
              "      <td>10.557465</td>\n",
              "      <td>13.304434</td>\n",
              "      <td>8.205059</td>\n",
              "      <td>9.211476</td>\n",
              "      <td>...</td>\n",
              "      <td>0.064070</td>\n",
              "      <td>-0.384008</td>\n",
              "      <td>0.678042</td>\n",
              "      <td>0.096329</td>\n",
              "      <td>-0.266554</td>\n",
              "      <td>-0.079871</td>\n",
              "      <td>-0.463237</td>\n",
              "      <td>0.522998</td>\n",
              "      <td>-0.046902</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.583724</td>\n",
              "      <td>15.711865</td>\n",
              "      <td>12.804521</td>\n",
              "      <td>8.881669</td>\n",
              "      <td>8.430028</td>\n",
              "      <td>12.964607</td>\n",
              "      <td>6.806517</td>\n",
              "      <td>4.294341</td>\n",
              "      <td>5.385714</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.065488</td>\n",
              "      <td>0.209858</td>\n",
              "      <td>0.920408</td>\n",
              "      <td>0.042210</td>\n",
              "      <td>-0.441542</td>\n",
              "      <td>-0.152317</td>\n",
              "      <td>0.511386</td>\n",
              "      <td>-0.096482</td>\n",
              "      <td>0.037473</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 1937 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-910b37ae-e1e0-4c42-ad56-e0ef9ccb86b5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-910b37ae-e1e0-4c42-ad56-e0ef9ccb86b5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-910b37ae-e1e0-4c42-ad56-e0ef9ccb86b5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6ab773c1-dccd-4a9e-9d05-04399e34cbc6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6ab773c1-dccd-4a9e-9d05-04399e34cbc6')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6ab773c1-dccd-4a9e-9d05-04399e34cbc6 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(x_train, x_test, y_train, y_test) = train_test_split(data.drop('vital.status', axis=1), data['vital.status'], test_size=0.2, random_state=42)\n",
        "x_train.shape, y_train.shape, x_test.shape, y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ceSDVoIknx7n",
        "outputId": "f2923075-f815-433c-814c-8b6079905055"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((564, 1936), (564,), (141, 1936), (141,))"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''x_train = np.expand_dims(x_train, axis=2)\n",
        "x_test = np.expand_dims(x_test, axis=2)'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "hfS-PGdUoz11",
        "outputId": "b0b81ff5-7332-47b8-ef77-c2e85ecffc9e"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'x_train = np.expand_dims(x_train, axis=2)\\nx_test = np.expand_dims(x_test, axis=2)'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **NAS Model Building Function**\n",
        "\n",
        "### Defining the Search Space\n",
        "\n",
        "A compact **MobileNet‑style** search space:\n",
        "\n",
        "| Hyper‑parameter | Choices |\n",
        "|-----------------|---------|\n",
        "| Number of Conv Blocks | 2 – 4 |\n",
        "| Filters per Block     | 24 – 64 |\n",
        "| Kernel Size           | 2, 3, or 5 |\n",
        "| Depthwise Separable?  | {True, False} |\n",
        "| Dropout Rate          | 0.0 – 0.3 |"
      ],
      "metadata": {
        "id": "ExNtLjp_1R7L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# model-building function that KerasTuner can use\n",
        "\n",
        "def model_builder(hp):\n",
        "    inputs = tf.keras.Input(shape=(x_train.shape[1], 1))\n",
        "    x = inputs\n",
        "    num_blocks = hp.Int('num_blocks', 2, 4, 6)\n",
        "    for i in range(num_blocks):\n",
        "        filters = hp.Choice(f'filters_{i}', [24,32,40,48,64])\n",
        "        kernel  = hp.Choice(f'kernel_{i}', [2,3,5])\n",
        "        if hp.Boolean(f'ds_sep_{i}'):\n",
        "            x = tf.keras.layers.SeparableConv1D(filters, kernel,\n",
        "                                                padding='same', activation='relu')(x)\n",
        "        else:\n",
        "            x = tf.keras.layers.Conv1D(filters, kernel,\n",
        "                                       padding='same', activation='relu')(x)\n",
        "        x = tf.keras.layers.BatchNormalization()(x)\n",
        "        x = tf.keras.layers.MaxPool1D()(x)\n",
        "    x = tf.keras.layers.Flatten()(x)\n",
        "    x = tf.keras.layers.Dropout(rate=hp.Float('dropout',0.0,0.3,0.05))(x)\n",
        "    outputs = tf.keras.layers.Dense(10, activation='softmax')(x)\n",
        "    model = tf.keras.Model(inputs, outputs)\n",
        "\n",
        "    lr = hp.Choice('lr',[1e-3, 5e-4, 1e-4])\n",
        "    model.compile(optimizer=tf.keras.optimizers.Adam(lr),\n",
        "                  loss='sparse_categorical_crossentropy',\n",
        "                  metrics=['accuracy'])\n",
        "    return model\n",
        "\n",
        "\n",
        "\n",
        "# instantiating tuner\n",
        "\n",
        "tuner = kt.Hyperband(model_builder,\n",
        "                     objective='val_accuracy',\n",
        "                     max_epochs=2,\n",
        "                     factor=3,\n",
        "                     directory='nas_dir',\n",
        "                     overwrite=True,\n",
        "                     project_name='intro_to_NAS')"
      ],
      "metadata": {
        "id": "s6cDcWmqb54D"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LKR1MI31bw7Y"
      },
      "outputs": [],
      "source": [
        "# adding early stopping\n",
        "stop_early = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)\n",
        "\n",
        "# run NAS\n",
        "print(\"Starting NAS search...\")\n",
        "tuner.search(x_train, y_train, epochs=4, validation_data=(x_test, y_test), callbacks=[stop_early])\n",
        "print(\"NAS search complete.\")\n",
        "\n",
        "# optimal hyperparameters and the best model\n",
        "best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]\n",
        "nas_model = tuner.hypermodel.build(best_hps)\n",
        "print(f\"Best hyperparameters: {best_hps.values}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# !rm -rf nas_dir"
      ],
      "metadata": {
        "id": "Zl04dDVcsQfP"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# train best model found by NAS\n",
        "\n",
        "print(\"Training the best model found by NAS...\")\n",
        "history = nas_model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))\n",
        "val_acc_per_epoch = history.history['val_accuracy']\n",
        "best_epoch = val_acc_per_epoch.index(max(val_acc_per_epoch)) + 1\n",
        "print(f'Best epoch: {best_epoch}')"
      ],
      "metadata": {
        "id": "J0XcHP55fCy9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# re-initialize the model and train up to the best epoch\n",
        "\n",
        "hypermodel = tuner.hypermodel.build(best_hps)\n",
        "print(\"Retraining the best model until the best epoch...\")\n",
        "hypermodel.fit(x_train, y_train, epochs=best_epoch, validation_data=(x_test, y_test))\n",
        "nas_best_model = hypermodel\n",
        "print(\"Best model from NAS is trained and ready.\")\n",
        "\n",
        "# save model\n",
        "nas_best_model.save(\"nas_optimal_model.keras\")"
      ],
      "metadata": {
        "id": "9S-dDzdUhUtQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nas_best_model.summary()"
      ],
      "metadata": {
        "id": "YiEvP-JUiNGz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. **Post-training Quantization**\n",
        "\n",
        "We will convert the SavedModel to **TFLite dynamic‑range INT8** and to **full‑integer INT8** with a *representative dataset*:"
      ],
      "metadata": {
        "id": "3tf0j5Pq6AgC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# using a portion of the dataset\n",
        "\n",
        "def representative_data_generator():\n",
        "  for input_value in tf.data.Dataset.from_tensor_slices(x_train.astype(np.float32)).batch(1).take(100):\n",
        "    yield [tf.expand_dims(input_value, axis=-1)]\n",
        "\n",
        "converter_int8 = tf.lite.TFLiteConverter.from_keras_model(nas_best_model)\n",
        "converter_int8.optimizations = [tf.lite.Optimize.DEFAULT]\n",
        "\n",
        "converter_int8.representative_dataset = representative_data_generator\n",
        "\n",
        "converter_int8.target_spec.supported_ops = [\n",
        "    tf.lite.OpsSet.TFLITE_BUILTINS,\n",
        "    tf.lite.OpsSet.TFLITE_BUILTINS_INT8\n",
        "]"
      ],
      "metadata": {
        "id": "MHIy3t5E6I1O"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tflite_int8_quant_model = converter_int8.convert()\n",
        "with open('nas_model_int8_quant.tflite', 'wb') as f:\n",
        "    f.write(tflite_int8_quant_model)\n",
        "print(\"Full INT8 quantized model saved as nas_model_int8_quant.tflite\")"
      ],
      "metadata": {
        "id": "emDSsPs65rCU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "BY3izAEd6J3s"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}